{
    "sourceFile": "command_list8.c",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1700459087821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700459398991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 06:44:47 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 06:49:58 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -95,13 +95,15 @@\n \t\t\t\tfree(c->temp);\n \t\t\t}\n \t\t}\n \t\telse\n+\t\t{\n \t\t\tfree(c->head->str);\n \t\t\tc->temp = c->head;\n \t\t\tc->head = c->head->next;\n \t\t\tfree(c->temp);\n-\t\tx++;\n+\t\t}\n+\t\tc->x++;\n \t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n }\n"
                },
                {
                    "date": 1700459656786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 06:49:58 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 06:54:16 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -83,9 +83,9 @@\n \tc->x = 0;\n \twhile (c->head)\n \t{\n \t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n-\t\tif(c->head->status == 1)\n+\t\tif(c->head && c->head->status == 1)\n \t\t{\n \t\t\twhile(c->head->status == 1)\n \t\t\t{\n \t\t\t\tfree(c->head->str);\n"
                },
                {
                    "date": 1700460645509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 06:54:16 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 07:10:45 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -90,9 +90,10 @@\n \t\t\t{\n \t\t\t\tfree(c->head->str);\n \t\t\t\tc->temp = c->head;\n \t\t\t\tc->head = c->head->next;\n-\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n+\t\t\t\tif(c->head && c->head->str)\n+\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n \t\t\t\tfree(c->temp);\n \t\t\t}\n \t\t}\n \t\telse\n"
                },
                {
                    "date": 1700470776702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 07:10:45 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 09:59:36 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -85,9 +85,9 @@\n \t{\n \t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n \t\tif(c->head && c->head->status == 1)\n \t\t{\n-\t\t\twhile(c->head->status == 1)\n+\t\t\twhile(c->head && c->head->status == 1)\n \t\t\t{\n \t\t\t\tfree(c->head->str);\n \t\t\t\tc->temp = c->head;\n \t\t\t\tc->head = c->head->next;\n"
                },
                {
                    "date": 1700472011704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 09:59:36 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:20:11 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -95,15 +95,12 @@\n \t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n \t\t\t\tfree(c->temp);\n \t\t\t}\n \t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfree(c->head->str);\n-\t\t\tc->temp = c->head;\n-\t\t\tc->head = c->head->next;\n-\t\t\tfree(c->temp);\n-\t\t}\n+\t\tfree(c->head->str);\n+\t\tc->temp = c->head;\n+\t\tc->head = c->head->next;\n+\t\tfree(c->temp);\n \t\tc->x++;\n \t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n"
                },
                {
                    "date": 1700472052021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+/******************************************************************************/\n+/*                                                                            */\n+/*                                                        :::      ::::::::   */\n+/*   command_list8.c                                    :+:      :+:    :+:   */\n+/*                                                    +:+ +:+         +:+     */\n+/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n+/*                                                +#+#+#+#+#+   +#+           */\n+/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n+/*   Updated: 2023/11/20 10:20:52 by shhuang          ###   ########.fr       */\n+/*                                                                            */\n+/******************************************************************************/\n+\n+#include \"short_code.h\"\n+\n+void\tassign_structure(t_command *c)\n+{\n+\tc->structure->args = NULL;\n+\tc->structure->output = NULL;\n+\tif (c->structure_actual == NULL)\n+\t{\n+\t\tc->structure_head = c->structure;\n+\t\tc->structure_actual = c->structure_head;\n+\t}\n+\telse\n+\t{\n+\t\tc->structure_actual->output = c->structure;\n+\t\tc->structure_actual = c->structure_actual->output;\n+\t}\n+}\n+\n+int\tis_void(t_command *c)\n+{\n+\tif (c->structure->type == Null && !c->structure_head)\n+\t{\n+\t\tfree(c->structure);\n+\t\treturn (1);\n+\t}\n+\treturn (0);\n+}\n+\n+int\tevaluate_next_struct(t_command *c, char *s)\n+{\n+\tc->type = search_command(s, &c->i, &c->command, c->structure);\n+\tif (c->type == 0)\n+\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n+\t\t\t\tc->structure);\n+\telse if (c->type == -1)\n+\t{\n+\t\tfree(c->structure);\n+\t\tfree_t_pnode_list(c->structure_head);\n+\t\treturn (0);\n+\t}\n+\telse if (c->type == -3)\n+\t{\n+\t\tif (is_void(c))\n+\t\t\treturn (0);\n+\t\tfree(c->structure);\n+\t\treturn (1);\n+\t}\n+\telse if (c->type == -4)\n+\t{\n+\t\tassign_structure(c);\n+\t\treturn (-2);\n+\t}\n+\treturn (3);\n+}\n+\n+void\tcommand_to_structure(t_command *c)\n+{\n+\tc->head = c->command;\n+\tif (c->structure_head == NULL)\n+\t\tc->structure_head = c->structure;\n+\tc->x = 0;\n+\tc->command = c->head;\n+\twhile (c->command)\n+\t{\n+\t\tc->x++;\n+\t\tc->command = c->command->next;\n+\t}\n+\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n+\tc->structure->input_fd = 0;\n+\tc->structure->output_fd = 1;\n+\tc->x = 0;\n+\twhile (c->head)\n+\t{\n+\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n+\t\tif(c->head && c->head->status == 1)\n+\t\t{\n+\t\t\twhile(c->head && c->head->status == 1)\n+\t\t\t{\n+\t\t\t\tfree(c->head->str);\n+\t\t\t\tc->temp = c->head;\n+\t\t\t\tc->head = c->head->next;\n+\t\t\t\tif(c->head && c->head->str)\n+\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n+\t\t\t\tfree(c->temp);\n+\t\t\t}\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tfree(c->head->str);\n+\t\t\tc->temp = c->head;\n+\t\t\tc->head = c->head->next;\n+\t\t\tfree(c->temp);\n+\t\t}\n+\t\tc->x++;\n+\t}\n+\tc->structure->args[c->x] = NULL;\n+\tc->structure->output = NULL;\n+}\n+\n+void\tstructure_linking(t_command *c)\n+{\n+\tif (c->structure_actual == NULL)\n+\t\tc->structure_actual = c->structure_head;\n+\telse\n+\t{\n+\t\tc->structure_actual->output = c->structure;\n+\t\tc->structure_actual = c->structure_actual->output;\n+\t}\n+}\n"
                },
                {
                    "date": 1700472406688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:20:52 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:26:46 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -95,16 +95,16 @@\n \t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n \t\t\t\tfree(c->temp);\n \t\t\t}\n \t\t}\n-\t\telse\n+\t\tif(c->head)\n \t\t{\n+\t\t\tc->x++;\n \t\t\tfree(c->head->str);\n \t\t\tc->temp = c->head;\n \t\t\tc->head = c->head->next;\n \t\t\tfree(c->temp);\n \t\t}\n-\t\tc->x++;\n \t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n }\n@@ -118,122 +118,4 @@\n \t\tc->structure_actual->output = c->structure;\n \t\tc->structure_actual = c->structure_actual->output;\n \t}\n }\n-/******************************************************************************/\n-/*                                                                            */\n-/*                                                        :::      ::::::::   */\n-/*   command_list8.c                                    :+:      :+:    :+:   */\n-/*                                                    +:+ +:+         +:+     */\n-/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n-/*                                                +#+#+#+#+#+   +#+           */\n-/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:20:11 by shhuang          ###   ########.fr       */\n-/*                                                                            */\n-/******************************************************************************/\n-\n-#include \"short_code.h\"\n-\n-void\tassign_structure(t_command *c)\n-{\n-\tc->structure->args = NULL;\n-\tc->structure->output = NULL;\n-\tif (c->structure_actual == NULL)\n-\t{\n-\t\tc->structure_head = c->structure;\n-\t\tc->structure_actual = c->structure_head;\n-\t}\n-\telse\n-\t{\n-\t\tc->structure_actual->output = c->structure;\n-\t\tc->structure_actual = c->structure_actual->output;\n-\t}\n-}\n-\n-int\tis_void(t_command *c)\n-{\n-\tif (c->structure->type == Null && !c->structure_head)\n-\t{\n-\t\tfree(c->structure);\n-\t\treturn (1);\n-\t}\n-\treturn (0);\n-}\n-\n-int\tevaluate_next_struct(t_command *c, char *s)\n-{\n-\tc->type = search_command(s, &c->i, &c->command, c->structure);\n-\tif (c->type == 0)\n-\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n-\t\t\t\tc->structure);\n-\telse if (c->type == -1)\n-\t{\n-\t\tfree(c->structure);\n-\t\tfree_t_pnode_list(c->structure_head);\n-\t\treturn (0);\n-\t}\n-\telse if (c->type == -3)\n-\t{\n-\t\tif (is_void(c))\n-\t\t\treturn (0);\n-\t\tfree(c->structure);\n-\t\treturn (1);\n-\t}\n-\telse if (c->type == -4)\n-\t{\n-\t\tassign_structure(c);\n-\t\treturn (-2);\n-\t}\n-\treturn (3);\n-}\n-\n-void\tcommand_to_structure(t_command *c)\n-{\n-\tc->head = c->command;\n-\tif (c->structure_head == NULL)\n-\t\tc->structure_head = c->structure;\n-\tc->x = 0;\n-\tc->command = c->head;\n-\twhile (c->command)\n-\t{\n-\t\tc->x++;\n-\t\tc->command = c->command->next;\n-\t}\n-\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n-\tc->structure->input_fd = 0;\n-\tc->structure->output_fd = 1;\n-\tc->x = 0;\n-\twhile (c->head)\n-\t{\n-\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n-\t\tif(c->head && c->head->status == 1)\n-\t\t{\n-\t\t\twhile(c->head && c->head->status == 1)\n-\t\t\t{\n-\t\t\t\tfree(c->head->str);\n-\t\t\t\tc->temp = c->head;\n-\t\t\t\tc->head = c->head->next;\n-\t\t\t\tif(c->head && c->head->str)\n-\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n-\t\t\t\tfree(c->temp);\n-\t\t\t}\n-\t\t}\n-\t\tfree(c->head->str);\n-\t\tc->temp = c->head;\n-\t\tc->head = c->head->next;\n-\t\tfree(c->temp);\n-\t\tc->x++;\n-\t}\n-\tc->structure->args[c->x] = NULL;\n-\tc->structure->output = NULL;\n-}\n-\n-void\tstructure_linking(t_command *c)\n-{\n-\tif (c->structure_actual == NULL)\n-\t\tc->structure_actual = c->structure_head;\n-\telse\n-\t{\n-\t\tc->structure_actual->output = c->structure;\n-\t\tc->structure_actual = c->structure_actual->output;\n-\t}\n-}\n"
                },
                {
                    "date": 1700472484701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:26:46 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:28:04 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -90,21 +90,27 @@\n \t\t\t{\n \t\t\t\tfree(c->head->str);\n \t\t\t\tc->temp = c->head;\n \t\t\t\tc->head = c->head->next;\n-\t\t\t\tif(c->head && c->head->str)\n-\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n+\t\t\t\tif (c->head && c->head->str)\n+\t\t\t\t{\n+\t\t\t\t\tchar *temp_str = ft_strdup(c->head->str); // Duplica la stringa prima di unirla\n+\t\t\t\t\tchar *joined_str = ft_strjoin(c->structure->args[c->x], temp_str);\n+\t\t\t\t\tfree(temp_str);\n+\t\t\t\t\tfree(c->structure->args[c->x]); // Libera la vecchia stringa\n+\t\t\t\t\tc->structure->args[c->x] = joined_str; // Aggiorna con la nuova stringa unita\n+\t\t\t\t}\n \t\t\t\tfree(c->temp);\n \t\t\t}\n \t\t}\n-\t\tif(c->head)\n+\t\telse\n \t\t{\n-\t\t\tc->x++;\n \t\t\tfree(c->head->str);\n \t\t\tc->temp = c->head;\n \t\t\tc->head = c->head->next;\n \t\t\tfree(c->temp);\n \t\t}\n+\t\tc->x++;\n \t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n }\n"
                },
                {
                    "date": 1700472840697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:28:04 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:34:00 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -90,27 +90,28 @@\n \t\t\t{\n \t\t\t\tfree(c->head->str);\n \t\t\t\tc->temp = c->head;\n \t\t\t\tc->head = c->head->next;\n-\t\t\t\tif (c->head && c->head->str)\n+\t\t\t\tfree(c->temp);\n+\t\t\t\tif(c->head && c->head->str)\n \t\t\t\t{\n-\t\t\t\t\tchar *temp_str = ft_strdup(c->head->str); // Duplica la stringa prima di unirla\n-\t\t\t\t\tchar *joined_str = ft_strjoin(c->structure->args[c->x], temp_str);\n-\t\t\t\t\tfree(temp_str);\n-\t\t\t\t\tfree(c->structure->args[c->x]); // Libera la vecchia stringa\n-\t\t\t\t\tc->structure->args[c->x] = joined_str; // Aggiorna con la nuova stringa unita\n+\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n \t\t\t\t}\n-\t\t\t\tfree(c->temp);\n \t\t\t}\n+\t\t\tfree(c->head->str);\n+\t\t\tc->temp = c->head;\n+\t\t\tc->head = c->head->next;\n+\t\t\tfree(c->temp);\n \t\t}\n \t\telse\n \t\t{\n \t\t\tfree(c->head->str);\n \t\t\tc->temp = c->head;\n \t\t\tc->head = c->head->next;\n \t\t\tfree(c->temp);\n \t\t}\n-\t\tc->x++;\n+\t\tif(c->head)\n+\t\t\tc->x++;\n \t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n }\n"
                },
                {
                    "date": 1700472879898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:34:00 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:34:39 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -96,22 +96,18 @@\n \t\t\t\t{\n \t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n \t\t\t\t}\n \t\t\t}\n-\t\t\tfree(c->head->str);\n-\t\t\tc->temp = c->head;\n-\t\t\tc->head = c->head->next;\n-\t\t\tfree(c->temp);\n \t\t}\n \t\telse\n \t\t{\n+\t\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n \t\t\tfree(c->head->str);\n \t\t\tc->temp = c->head;\n \t\t\tc->head = c->head->next;\n \t\t\tfree(c->temp);\n \t\t}\n-\t\tif(c->head)\n-\t\t\tc->x++;\n+\t\tc->x++;\n \t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n }\n"
                },
                {
                    "date": 1700473288082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+/******************************************************************************/\n+/*                                                                            */\n+/*                                                        :::      ::::::::   */\n+/*   command_list8.c                                    :+:      :+:    :+:   */\n+/*                                                    +:+ +:+         +:+     */\n+/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n+/*                                                +#+#+#+#+#+   +#+           */\n+/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n+/*   Updated: 2023/11/20 10:41:28 by shhuang          ###   ########.fr       */\n+/*                                                                            */\n+/******************************************************************************/\n+\n+#include \"short_code.h\"\n+\n+void\tassign_structure(t_command *c)\n+{\n+\tc->structure->args = NULL;\n+\tc->structure->output = NULL;\n+\tif (c->structure_actual == NULL)\n+\t{\n+\t\tc->structure_head = c->structure;\n+\t\tc->structure_actual = c->structure_head;\n+\t}\n+\telse\n+\t{\n+\t\tc->structure_actual->output = c->structure;\n+\t\tc->structure_actual = c->structure_actual->output;\n+\t}\n+}\n+\n+int\tis_void(t_command *c)\n+{\n+\tif (c->structure->type == Null && !c->structure_head)\n+\t{\n+\t\tfree(c->structure);\n+\t\treturn (1);\n+\t}\n+\treturn (0);\n+}\n+\n+int\tevaluate_next_struct(t_command *c, char *s)\n+{\n+\tc->type = search_command(s, &c->i, &c->command, c->structure);\n+\tif (c->type == 0)\n+\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n+\t\t\t\tc->structure);\n+\telse if (c->type == -1)\n+\t{\n+\t\tfree(c->structure);\n+\t\tfree_t_pnode_list(c->structure_head);\n+\t\treturn (0);\n+\t}\n+\telse if (c->type == -3)\n+\t{\n+\t\tif (is_void(c))\n+\t\t\treturn (0);\n+\t\tfree(c->structure);\n+\t\treturn (1);\n+\t}\n+\telse if (c->type == -4)\n+\t{\n+\t\tassign_structure(c);\n+\t\treturn (-2);\n+\t}\n+\treturn (3);\n+}\n+\n+void\tcommand_to_structure(t_command *c)\n+{\n+\tc->head = c->command;\n+\tif (c->structure_head == NULL)\n+\t\tc->structure_head = c->structure;\n+\tc->x = 0;\n+\tc->command = c->head;\n+\twhile (c->command)\n+\t{\n+\t\tc->x++;\n+\t\tc->command = c->command->next;\n+\t}\n+\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n+\tc->structure->input_fd = 0;\n+\tc->structure->output_fd = 1;\n+\tc->x = 0;\n+\twhile (c->head)\n+\t{\n+\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n+\t\tif(c->head && c->head->status == 1)\n+\t\t{\n+\t\t\twhile(c->head && c->head->status == 1)\n+\t\t\t{\n+\t\t\t\tfree(c->head->str);\n+\t\t\t\tc->temp = c->head;\n+\t\t\t\tc->head = c->head->next;\n+\t\t\t\tfree(c->temp);\n+\t\t\t\tif(c->head && c->head->str)\n+\t\t\t\t{\n+\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], c->head->str);\n+\t\t\t\t}\n+\t\t\t\tfree(c->head->str);\n+\t\t\t\tc->temp = c->head;\n+\t\t\t\tc->head = c->head->next;\n+\t\t\t\tfree(c->temp);\n+\t\t\t}\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n+\t\t\tfree(c->head->str);\n+\t\t\tc->temp = c->head;\n+\t\t\tc->head = c->head->next;\n+\t\t\tfree(c->temp);\n+\t\t}\n+\t\tc->x++;\n+\t}\n+\tc->structure->args[c->x] = NULL;\n+\tc->structure->output = NULL;\n+}\n+\n+void\tstructure_linking(t_command *c)\n+{\n+\tif (c->structure_actual == NULL)\n+\t\tc->structure_actual = c->structure_head;\n+\telse\n+\t{\n+\t\tc->structure_actual->output = c->structure;\n+\t\tc->structure_actual = c->structure_actual->output;\n+\t}\n+}\n"
                },
                {
                    "date": 1700473322670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+/******************************************************************************/\n+/*                                                                            */\n+/*                                                        :::      ::::::::   */\n+/*   command_list8.c                                    :+:      :+:    :+:   */\n+/*                                                    +:+ +:+         +:+     */\n+/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n+/*                                                +#+#+#+#+#+   +#+           */\n+/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n+/*   Updated: 2023/11/20 10:42:02 by shhuang          ###   ########.fr       */\n+/*                                                                            */\n+/******************************************************************************/\n+\n+#include \"short_code.h\"\n+\n+void\tassign_structure(t_command *c)\n+{\n+\tc->structure->args = NULL;\n+\tc->structure->output = NULL;\n+\tif (c->structure_actual == NULL)\n+\t{\n+\t\tc->structure_head = c->structure;\n+\t\tc->structure_actual = c->structure_head;\n+\t}\n+\telse\n+\t{\n+\t\tc->structure_actual->output = c->structure;\n+\t\tc->structure_actual = c->structure_actual->output;\n+\t}\n+}\n+\n+int\tis_void(t_command *c)\n+{\n+\tif (c->structure->type == Null && !c->structure_head)\n+\t{\n+\t\tfree(c->structure);\n+\t\treturn (1);\n+\t}\n+\treturn (0);\n+}\n+\n+int\tevaluate_next_struct(t_command *c, char *s)\n+{\n+\tc->type = search_command(s, &c->i, &c->command, c->structure);\n+\tif (c->type == 0)\n+\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n+\t\t\t\tc->structure);\n+\telse if (c->type == -1)\n+\t{\n+\t\tfree(c->structure);\n+\t\tfree_t_pnode_list(c->structure_head);\n+\t\treturn (0);\n+\t}\n+\telse if (c->type == -3)\n+\t{\n+\t\tif (is_void(c))\n+\t\t\treturn (0);\n+\t\tfree(c->structure);\n+\t\treturn (1);\n+\t}\n+\telse if (c->type == -4)\n+\t{\n+\t\tassign_structure(c);\n+\t\treturn (-2);\n+\t}\n+\treturn (3);\n+}\n+\n+void\tcommand_to_structure(t_command *c)\n+{\n+\tc->head = c->command;\n+\tif (c->structure_head == NULL)\n+\t\tc->structure_head = c->structure;\n+\tc->x = 0;\n+\tc->command = c->head;\n+\twhile (c->command)\n+\t{\n+\t\tc->x++;\n+\t\tc->command = c->command->next;\n+\t}\n+\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n+\tc->structure->input_fd = 0;\n+\tc->structure->output_fd = 1;\n+\tc->x = 0;\n+\twhile (c->head)\n+\t{\n+\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n+\t\tif(c->head && c->head->status == 1)\n+\t\t{\n+\t\t\twhile(c->head && c->head->status == 1)\n+\t\t\t{\n+\t\t\t\tfree(c->head->str);\n+\t\t\t\tc->temp = c->head;\n+\t\t\t\tc->head = c->head->next;\n+\t\t\t\tfree(c->temp);\n+\t\t\t\tif(c->head && c->head->str)\n+\t\t\t\t{\n+\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], c->head->str);\n+\t\t\t\t}\n+\t\t\t\tfree(c->head->str);\n+\t\t\t\tc->temp = c->head;\n+\t\t\t\tc->head = c->head->next;\n+\t\t\t\tfree(c->temp);\n+\t\t\t}\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n+\t\t\tfree(c->head->str);\n+\t\t\tc->temp = c->head;\n+\t\t\tc->head = c->head->next;\n+\t\t\tfree(c->temp);\n+\t\t}\n+\t\tif(c->head)\n+\t\t\tc->x++;\n+\t}\n+\tc->structure->args[c->x] = NULL;\n+\tc->structure->output = NULL;\n+}\n+\n+void\tstructure_linking(t_command *c)\n+{\n+\tif (c->structure_actual == NULL)\n+\t\tc->structure_actual = c->structure_head;\n+\telse\n+\t{\n+\t\tc->structure_actual->output = c->structure;\n+\t\tc->structure_actual = c->structure_actual->output;\n+\t}\n+}\n"
                },
                {
                    "date": 1700473612187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:42:02 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:46:52 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -76,23 +76,20 @@\n \t{\n \t\tc->x++;\n \t\tc->command = c->command->next;\n \t}\n-\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n+\tc->structure->args = ft_calloc(sizeof(char *) , (size_t)(c->x + 1));\n \tc->structure->input_fd = 0;\n \tc->structure->output_fd = 1;\n \tc->x = 0;\n \twhile (c->head)\n \t{\n-\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n \t\tif(c->head && c->head->status == 1)\n \t\t{\n \t\t\twhile(c->head && c->head->status == 1)\n \t\t\t{\n-\t\t\t\tfree(c->head->str);\n-\t\t\t\tc->temp = c->head;\n-\t\t\t\tc->head = c->head->next;\n-\t\t\t\tfree(c->temp);\n+\t\t\t\tif(c->structure->args[c->x] == NULL)\n+\t\t\t\t\tc->structure->args[c->x] = ft_strdup(\"\");\n \t\t\t\tif(c->head && c->head->str)\n \t\t\t\t{\n \t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], c->head->str);\n \t\t\t\t}\n@@ -109,139 +106,10 @@\n \t\t\tc->temp = c->head;\n \t\t\tc->head = c->head->next;\n \t\t\tfree(c->temp);\n \t\t}\n-\t\tif(c->head)\n-\t\t\tc->x++;\n-\t}\n-\tc->structure->args[c->x] = NULL;\n-\tc->structure->output = NULL;\n-}\n-\n-void\tstructure_linking(t_command *c)\n-{\n-\tif (c->structure_actual == NULL)\n-\t\tc->structure_actual = c->structure_head;\n-\telse\n-\t{\n-\t\tc->structure_actual->output = c->structure;\n-\t\tc->structure_actual = c->structure_actual->output;\n-\t}\n-}\n-/******************************************************************************/\n-/*                                                                            */\n-/*                                                        :::      ::::::::   */\n-/*   command_list8.c                                    :+:      :+:    :+:   */\n-/*                                                    +:+ +:+         +:+     */\n-/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n-/*                                                +#+#+#+#+#+   +#+           */\n-/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:41:28 by shhuang          ###   ########.fr       */\n-/*                                                                            */\n-/******************************************************************************/\n-\n-#include \"short_code.h\"\n-\n-void\tassign_structure(t_command *c)\n-{\n-\tc->structure->args = NULL;\n-\tc->structure->output = NULL;\n-\tif (c->structure_actual == NULL)\n-\t{\n-\t\tc->structure_head = c->structure;\n-\t\tc->structure_actual = c->structure_head;\n-\t}\n-\telse\n-\t{\n-\t\tc->structure_actual->output = c->structure;\n-\t\tc->structure_actual = c->structure_actual->output;\n-\t}\n-}\n-\n-int\tis_void(t_command *c)\n-{\n-\tif (c->structure->type == Null && !c->structure_head)\n-\t{\n-\t\tfree(c->structure);\n-\t\treturn (1);\n-\t}\n-\treturn (0);\n-}\n-\n-int\tevaluate_next_struct(t_command *c, char *s)\n-{\n-\tc->type = search_command(s, &c->i, &c->command, c->structure);\n-\tif (c->type == 0)\n-\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n-\t\t\t\tc->structure);\n-\telse if (c->type == -1)\n-\t{\n-\t\tfree(c->structure);\n-\t\tfree_t_pnode_list(c->structure_head);\n-\t\treturn (0);\n-\t}\n-\telse if (c->type == -3)\n-\t{\n-\t\tif (is_void(c))\n-\t\t\treturn (0);\n-\t\tfree(c->structure);\n-\t\treturn (1);\n-\t}\n-\telse if (c->type == -4)\n-\t{\n-\t\tassign_structure(c);\n-\t\treturn (-2);\n-\t}\n-\treturn (3);\n-}\n-\n-void\tcommand_to_structure(t_command *c)\n-{\n-\tc->head = c->command;\n-\tif (c->structure_head == NULL)\n-\t\tc->structure_head = c->structure;\n-\tc->x = 0;\n-\tc->command = c->head;\n-\twhile (c->command)\n-\t{\n \t\tc->x++;\n-\t\tc->command = c->command->next;\n \t}\n-\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n-\tc->structure->input_fd = 0;\n-\tc->structure->output_fd = 1;\n-\tc->x = 0;\n-\twhile (c->head)\n-\t{\n-\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n-\t\tif(c->head && c->head->status == 1)\n-\t\t{\n-\t\t\twhile(c->head && c->head->status == 1)\n-\t\t\t{\n-\t\t\t\tfree(c->head->str);\n-\t\t\t\tc->temp = c->head;\n-\t\t\t\tc->head = c->head->next;\n-\t\t\t\tfree(c->temp);\n-\t\t\t\tif(c->head && c->head->str)\n-\t\t\t\t{\n-\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], c->head->str);\n-\t\t\t\t}\n-\t\t\t\tfree(c->head->str);\n-\t\t\t\tc->temp = c->head;\n-\t\t\t\tc->head = c->head->next;\n-\t\t\t\tfree(c->temp);\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n-\t\t\tfree(c->head->str);\n-\t\t\tc->temp = c->head;\n-\t\t\tc->head = c->head->next;\n-\t\t\tfree(c->temp);\n-\t\t}\n-\t\tc->x++;\n-\t}\n \tc->structure->args[c->x] = NULL;\n \tc->structure->output = NULL;\n }\n \n@@ -254,128 +122,4 @@\n \t\tc->structure_actual->output = c->structure;\n \t\tc->structure_actual = c->structure_actual->output;\n \t}\n }\n-/******************************************************************************/\n-/*                                                                            */\n-/*                                                        :::      ::::::::   */\n-/*   command_list8.c                                    :+:      :+:    :+:   */\n-/*                                                    +:+ +:+         +:+     */\n-/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n-/*                                                +#+#+#+#+#+   +#+           */\n-/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:34:39 by shhuang          ###   ########.fr       */\n-/*                                                                            */\n-/******************************************************************************/\n-\n-#include \"short_code.h\"\n-\n-void\tassign_structure(t_command *c)\n-{\n-\tc->structure->args = NULL;\n-\tc->structure->output = NULL;\n-\tif (c->structure_actual == NULL)\n-\t{\n-\t\tc->structure_head = c->structure;\n-\t\tc->structure_actual = c->structure_head;\n-\t}\n-\telse\n-\t{\n-\t\tc->structure_actual->output = c->structure;\n-\t\tc->structure_actual = c->structure_actual->output;\n-\t}\n-}\n-\n-int\tis_void(t_command *c)\n-{\n-\tif (c->structure->type == Null && !c->structure_head)\n-\t{\n-\t\tfree(c->structure);\n-\t\treturn (1);\n-\t}\n-\treturn (0);\n-}\n-\n-int\tevaluate_next_struct(t_command *c, char *s)\n-{\n-\tc->type = search_command(s, &c->i, &c->command, c->structure);\n-\tif (c->type == 0)\n-\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n-\t\t\t\tc->structure);\n-\telse if (c->type == -1)\n-\t{\n-\t\tfree(c->structure);\n-\t\tfree_t_pnode_list(c->structure_head);\n-\t\treturn (0);\n-\t}\n-\telse if (c->type == -3)\n-\t{\n-\t\tif (is_void(c))\n-\t\t\treturn (0);\n-\t\tfree(c->structure);\n-\t\treturn (1);\n-\t}\n-\telse if (c->type == -4)\n-\t{\n-\t\tassign_structure(c);\n-\t\treturn (-2);\n-\t}\n-\treturn (3);\n-}\n-\n-void\tcommand_to_structure(t_command *c)\n-{\n-\tc->head = c->command;\n-\tif (c->structure_head == NULL)\n-\t\tc->structure_head = c->structure;\n-\tc->x = 0;\n-\tc->command = c->head;\n-\twhile (c->command)\n-\t{\n-\t\tc->x++;\n-\t\tc->command = c->command->next;\n-\t}\n-\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n-\tc->structure->input_fd = 0;\n-\tc->structure->output_fd = 1;\n-\tc->x = 0;\n-\twhile (c->head)\n-\t{\n-\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n-\t\tif(c->head && c->head->status == 1)\n-\t\t{\n-\t\t\twhile(c->head && c->head->status == 1)\n-\t\t\t{\n-\t\t\t\tfree(c->head->str);\n-\t\t\t\tc->temp = c->head;\n-\t\t\t\tc->head = c->head->next;\n-\t\t\t\tfree(c->temp);\n-\t\t\t\tif(c->head && c->head->str)\n-\t\t\t\t{\n-\t\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n-\t\t\tfree(c->head->str);\n-\t\t\tc->temp = c->head;\n-\t\t\tc->head = c->head->next;\n-\t\t\tfree(c->temp);\n-\t\t}\n-\t\tc->x++;\n-\t}\n-\tc->structure->args[c->x] = NULL;\n-\tc->structure->output = NULL;\n-}\n-\n-void\tstructure_linking(t_command *c)\n-{\n-\tif (c->structure_actual == NULL)\n-\t\tc->structure_actual = c->structure_head;\n-\telse\n-\t{\n-\t\tc->structure_actual->output = c->structure;\n-\t\tc->structure_actual = c->structure_actual->output;\n-\t}\n-}\n"
                },
                {
                    "date": 1700473887151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:46:52 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:51:27 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n@@ -97,8 +97,16 @@\n \t\t\t\tc->temp = c->head;\n \t\t\t\tc->head = c->head->next;\n \t\t\t\tfree(c->temp);\n \t\t\t}\n+\t\t\tif(c->head && c->head->str)\n+\t\t\t{\n+\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], c->head->str);\n+\t\t\t}\n+\t\t\tfree(c->head->str);\n+\t\t\tc->temp = c->head;\n+\t\t\tc->head = c->head->next;\n+\t\t\tfree(c->temp);\n \t\t}\n \t\telse\n \t\t{\n \t\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n"
                },
                {
                    "date": 1700474223556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:51:27 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 10:57:03 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n"
                },
                {
                    "date": 1700474575897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/11/20 10:57:03 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/11/20 11:02:55 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /******************************************************************************/\n \n #include \"short_code.h\"\n"
                }
            ],
            "date": 1700459087821,
            "name": "Commit-0",
            "content": "/******************************************************************************/\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   command_list8.c                                    :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2023/10/30 17:45:39 by shhuang           #+#    #+#             */\n/*   Updated: 2023/11/20 06:44:47 by shhuang          ###   ########.fr       */\n/*                                                                            */\n/******************************************************************************/\n\n#include \"short_code.h\"\n\nvoid\tassign_structure(t_command *c)\n{\n\tc->structure->args = NULL;\n\tc->structure->output = NULL;\n\tif (c->structure_actual == NULL)\n\t{\n\t\tc->structure_head = c->structure;\n\t\tc->structure_actual = c->structure_head;\n\t}\n\telse\n\t{\n\t\tc->structure_actual->output = c->structure;\n\t\tc->structure_actual = c->structure_actual->output;\n\t}\n}\n\nint\tis_void(t_command *c)\n{\n\tif (c->structure->type == Null && !c->structure_head)\n\t{\n\t\tfree(c->structure);\n\t\treturn (1);\n\t}\n\treturn (0);\n}\n\nint\tevaluate_next_struct(t_command *c, char *s)\n{\n\tc->type = search_command(s, &c->i, &c->command, c->structure);\n\tif (c->type == 0)\n\t\tc->command_record = size_of_command(s, &c->i, &c->command,\n\t\t\t\tc->structure);\n\telse if (c->type == -1)\n\t{\n\t\tfree(c->structure);\n\t\tfree_t_pnode_list(c->structure_head);\n\t\treturn (0);\n\t}\n\telse if (c->type == -3)\n\t{\n\t\tif (is_void(c))\n\t\t\treturn (0);\n\t\tfree(c->structure);\n\t\treturn (1);\n\t}\n\telse if (c->type == -4)\n\t{\n\t\tassign_structure(c);\n\t\treturn (-2);\n\t}\n\treturn (3);\n}\n\nvoid\tcommand_to_structure(t_command *c)\n{\n\tc->head = c->command;\n\tif (c->structure_head == NULL)\n\t\tc->structure_head = c->structure;\n\tc->x = 0;\n\tc->command = c->head;\n\twhile (c->command)\n\t{\n\t\tc->x++;\n\t\tc->command = c->command->next;\n\t}\n\tc->structure->args = malloc(sizeof(char *) * (size_t)(c->x + 1));\n\tc->structure->input_fd = 0;\n\tc->structure->output_fd = 1;\n\tc->x = 0;\n\twhile (c->head)\n\t{\n\t\tc->structure->args[c->x] = ft_strdup(c->head->str);\n\t\tif(c->head->status == 1)\n\t\t{\n\t\t\twhile(c->head->status == 1)\n\t\t\t{\n\t\t\t\tfree(c->head->str);\n\t\t\t\tc->temp = c->head;\n\t\t\t\tc->head = c->head->next;\n\t\t\t\tc->structure->args[c->x] = ft_strjoin(c->structure->args[c->x], ft_strdup(c->head->str));\n\t\t\t\tfree(c->temp);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tfree(c->head->str);\n\t\t\tc->temp = c->head;\n\t\t\tc->head = c->head->next;\n\t\t\tfree(c->temp);\n\t\tx++;\n\t}\n\tc->structure->args[c->x] = NULL;\n\tc->structure->output = NULL;\n}\n\nvoid\tstructure_linking(t_command *c)\n{\n\tif (c->structure_actual == NULL)\n\t\tc->structure_actual = c->structure_head;\n\telse\n\t{\n\t\tc->structure_actual->output = c->structure;\n\t\tc->structure_actual = c->structure_actual->output;\n\t}\n}\n"
        }
    ]
}