{
    "sourceFile": "short_code.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1701720705826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1701720711793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n /*                                                    +:+ +:+         +:+     */\n /*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n /*                                                +#+#+#+#+#+   +#+           */\n /*   Created: 2023/10/31 15:13:22 by shhuang           #+#    #+#             */\n-/*   Updated: 2023/12/04 21:11:45 by shhuang          ###   ########.fr       */\n+/*   Updated: 2023/12/04 21:11:51 by shhuang          ###   ########.fr       */\n /*                                                                            */\n /* ************************************************************************** */\n \n #ifndef SHORT_CODE_H\n@@ -136,7 +136,7 @@\n void\t\t\tset_status(char *s, int i, int *status);\n void\t\t\tstructure_linking(t_command *c);\n int\t\t\t\tis_void(t_command *c);\n void\t\t\tfree_tmp_new_head(t_command **c);\n-void\tinit_transform_d(t_short_dollar *d)\n+void\t\t\tinit_transform_d(t_short_dollar *d);\n \n #endif\n"
                }
            ],
            "date": 1701720705826,
            "name": "Commit-0",
            "content": "/* ************************************************************************** */\n/*                                                                            */\n/*                                                        :::      ::::::::   */\n/*   short_code.h                                       :+:      :+:    :+:   */\n/*                                                    +:+ +:+         +:+     */\n/*   By: shhuang <dsheng1993@gmail.com>             +#+  +:+       +#+        */\n/*                                                +#+#+#+#+#+   +#+           */\n/*   Created: 2023/10/31 15:13:22 by shhuang           #+#    #+#             */\n/*   Updated: 2023/12/04 21:11:45 by shhuang          ###   ########.fr       */\n/*                                                                            */\n/* ************************************************************************** */\n\n#ifndef SHORT_CODE_H\n# define SHORT_CODE_H\n\n# include \"minishell.h\"\n# include \"pipeline.h\"\n# include \"libft/libft.h\"\n\ntypedef struct s_short_dollar\n{\n\tint\t\t\tenv_len;\n\tint\t\t\tsave;\n\tint\t\t\tsave_pre;\n\tint\t\t\tsize;\n\tint\t\t\tslash_count;\n\tint\t\t\tstart;\n\tint\t\t\tflag;\n\tint\t\t\ti;\n\tchar\t\t*tmp;\n\n}\t\t\t\tt_short_dollar;\n\ntypedef struct s_replace\n{\n\tint\t\t\tenv_len;\n\tchar\t\t*str;\n\tchar\t\t*result;\n\tchar\t\t*start;\n\tint\t\t\tx;\n}\t\t\t\tt_replace;\n\ntypedef struct s_slashes\n{\n\tint\t\t\ti;\n\tint\t\t\tcount;\n\tint\t\t\tx;\n\tchar\t\t*str;\n}\t\t\t\tt_slashes;\n\ntypedef struct s_command\n{\n\tt_redirect\t*command;\n\tt_redirect\t*head;\n\tt_pnode\t\t*structure;\n\tt_pnode\t\t*structure_head;\n\tt_pnode\t\t*structure_actual;\n\tt_redirect\t*temp;\n\tint\t\t\ti;\n\tint\t\t\tx;\n\tint\t\t\tcommand_record;\n\tint\t\t\ttype;\n\tint\t\t\tstatus;\n}\t\t\t\tt_command;\n\ntypedef struct s_search\n{\n\tint\t\t\tx;\n\tint\t\t\tstart;\n\tt_redirect\t*head;\n\tint\t\t\tsingle_double;\n\tint\t\t\trx;\n}\t\t\t\tt_search;\n\nint\t\t\t\tcheck_invalid(char c, char *invalid);\nint\t\t\t\tchecksymbol(char *s);\nint\t\t\t\tchecksymbol2(char *s);\nvoid\t\t\tinit_slashes(t_slashes *s);\nvoid\t\t\trun_count_slashes(char *tmp, t_slashes *s);\nchar\t\t\t*add_slashes(char *tmp);\nchar\t\t\t*ft_strndup(const char *s, size_t n);\nvoid\t\t\tinit_replace(t_replace *r);\nvoid\t\t\tevaluate_free(char **tmp, char **s, t_replace *r);\nchar\t\t\t*replace_for_new_str(char *s, char *tmp, int i, int *di);\nvoid\t\t\tinit_transform_d(t_short_dollar *d);\nint\t\t\t\tcreate_flags(char *s, t_short_dollar *d);\nchar\t\t\t*transform_for_dollar(char *s, t_data *data);\nvoid\t\t\tassign_redirection(int x, t_pnode *structure);\nvoid\t\t\tcheck_redirect_init(int *x, int *flag, int *count,\n\t\t\t\t\tt_pnode **structure);\nint\t\t\t\tcheck_redirect(char *s, int *i, t_pnode *structure);\nint\t\t\t\tcheck_pipe(char *s, int *i, t_pnode *structure);\nint\t\t\t\tcheck_virgolette_dispari(char *s, int *i);\nvoid\t\t\tinit_search(t_search *k, t_redirect **command, char *s, int *i);\nint\t\t\t\tcheck_zero_move(char *s, int *i, t_redirect **command,\n\t\t\t\t\tt_search *k);\nint\t\t\t\tcheck_pipe_redi(char *s, int *i, t_redirect **command,\n\t\t\t\t\tt_pnode *structure);\nint\t\t\t\tcreate_command_size(char *s, int *i, t_redirect **command,\n\t\t\t\t\tt_search *k);\nvoid\t\t\talloc_command_size(char *s, int *i, t_redirect **command,\n\t\t\t\t\tt_search *k);\nint\t\t\t\tsearch_command(char *s, int *i, t_redirect **command,\n\t\t\t\t\tt_pnode *structure);\nint\t\t\t\tcheck_and_skip_space(char *s, int *i);\nint\t\t\t\tassign_flag(char *s, int *i, t_redirect **command);\nint\t\t\t\tslash_return(char *s, int *i, t_redirect **command);\nint\t\t\t\tcheck_slashes(char *s, int *i, t_redirect **command);\nchar\t\t\t*substring(const char *str, size_t begin, size_t len);\nvoid\t\t\tnext_size(int *i, t_redirect **command);\nvoid\t\t\tadd_and_set_for_next(t_redirect **command, char *s);\nint\t\t\t\tend_check_flag_zero(char *s, int *i, t_redirect **command);\nint\t\t\t\tend_check(char *s, int *i, t_redirect **command);\nint\t\t\t\tflag_zero_space(char *s, int *i, t_redirect **command);\nvoid\t\t\tinit_size_of_command(t_pnode *structure, t_redirect **command,\n\t\t\t\t\tt_redirect **head, int *i);\nint\t\t\t\tbreak_or_add(char *s, int *i, t_redirect *command);\nint\t\t\t\tskip_and_endstring(char *s, int *i);\nint\t\t\t\tcheck_all_end(char *s, int *i, t_redirect **command,\n\t\t\t\t\tint *variabile);\nint\t\t\t\tsize_of_command(char *s, int *i, t_redirect **head,\n\t\t\t\t\tt_pnode *structure);\nvoid\t\t\tfree_t_pnode_list(t_pnode *structure_head);\nint\t\t\t\tinit_command(t_command *c, char *s);\nint\t\t\t\tcheck_continuation(char *s, t_command *c);\nvoid\t\t\tassign_structure(t_command *c);\nint\t\t\t\tis_void(t_command *c);\nint\t\t\t\tevaluate_next_struct(t_command *c, char *s);\nvoid\t\t\tcommand_to_structure(t_command *c);\nvoid\t\t\tstructure_linking(t_command *c);\nt_pnode\t\t\t*create_command_list(char *s);\nchar\t\t\t*check_and_addx(char *start, char *tmp,\n\t\t\t\t\tchar *position, int *di);\nint\t\t\t\tcheck_virgolette_doppie(char *s, int i);\nchar\t\t\t*ft_strjoin2(char *s1, char *s2);\nvoid\t\t\tset_status(char *s, int i, int *status);\nvoid\t\t\tstructure_linking(t_command *c);\nint\t\t\t\tis_void(t_command *c);\nvoid\t\t\tfree_tmp_new_head(t_command **c);\nvoid\tinit_transform_d(t_short_dollar *d)\n\n#endif\n"
        }
    ]
}